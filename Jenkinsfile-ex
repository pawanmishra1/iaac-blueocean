pipeline {
  agent any
    stages {
      stage('Provisioning') {
        parallel {
             stage('Create VM') {
               steps('Create VM ') {
	         sh '''#!/bin/bash
                 cd \'/root/infrastructure-as-code/terraform/small-size/'
                 /usr/local/bin/terraform apply -auto-approve
                 echo \'ALL VM Created\'  '''
                 ansiblePlaybook(inventory: '/root/IAAC/playbooks/inventory.ini', playbook: '/root/IAAC/playbooks/iaacdemoappcl.yml')       
                 ansiblePlaybook(inventory: '/root/IAAC/playbooks/inventory.ini', playbook: '/root/IAAC/playbooks/user_add.yml')
              }		  
            }
          }
         }
      
  	 stage('Patching OS') {
             steps {
                ansiblePlaybook(inventory: '/root/IAAC/playbooks/inventory.ini', playbook: '/root/IAAC/playbooks/ospatch.yml')

             }
            }
	

      stage('Upgrade Container Tools') {
         parallel {
            stage('Upgrade Docker') {
               steps {
                     ansiblePlaybook(inventory: '/root/IAAC/playbooks/inventory.ini', playbook: '/root/IAAC/playbooks/docker.yml')
           
             }
            }
   
            stage('Upgrade Kubernetes') {
              steps {
                    ansiblePlaybook(inventory: '/root/IAAC/playbooks/inventory.ini', playbook: '/root/IAAC/playbooks/docker.yml') 
             }
            }
         }
       }
  
 
 
      stage('Provision Cluster') {
	parallel {
	   stage('Midsize Cluster') {
	     steps {
         	    ansiblePlaybook(inventory: '/root/IAAC/playbooks/inventory.ini', playbook: '/root/IAAC/playbooks/kubernetes.yml')
	     }
	    }
     	   }
	  }
      stage('Upgrade App Stack') {
        parallel {
            stage('Upgrade Couchbase ') {
               steps {
                  ansiblePlaybook(inventory: '/root/IAAC/playbooks/inventory.ini', playbook: '/root/IAAC/playbooks/couchbase-kube.yml')
               }
            }
            stage('Upgrade Nginx') {
              steps {
                 ansiblePlaybook(inventory: '/root/IAAC/playbooks/inventory.ini', playbook: '/root/IAAC/playbooks/nginx-kube.yml')
              }
            }
	stage('Upgrade RabbitMQ ') {
	   steps {
	     ansiblePlaybook(inventory: '/root/IAAC/playbooks/inventory.ini', playbook: '/root/IAAC/playbooks/rabbitmq-kube.yml')
	     }
	    }
	   }
	  } 
        


       
      stage('Upgrade Application') {
        parallel {
            stage('Checking latest version') {
                steps {
                  sh '''#!/bin/bash
                     sleep 20
                     echo "SCM Check OUT"  '''
               }
            }
            stage('Build App') {
                steps {
                  sh '''#!/bin/bash
                     sleep 40
                     echo "Build APP"  '''
              }
            }
            

            stage('Static Code Analysis') {
                steps {
                  sh '''#!/bin/bash
                     sleep 60
                     echo "Unit Test and Sonar  Code Coverage"  '''
              }
            }

            stage('Update Application Deployment') {
                steps {
                  ansiblePlaybook(inventory: '/root/IAAC/playbooks/inventory.ini', playbook: '/root/IAAC/playbooks/iaacdemoapp.yml')
               }
            }
           stage('Patching Application') {
             steps {
                ansiblePlaybook(inventory: '/root/IAAC/playbooks/inventory.ini', playbook: '/root/IAAC/playbooks/apppatch.yml')

             }
            }

         }
      }  
      stage('Application Testing') {
         parallel {
           stage('Application vulnerability Scan') {
             steps {
                ansiblePlaybook(inventory: '/root/IAAC/playbooks/inventory.ini', playbook: '/root/IAAC/playbooks/appscan.yml')

             }
            }



            stage('Integration Test') {
             steps {
	            sh '''#!/bin/bash
		    sleep 47
		    echo "Integration test"  '''
	     }
            }
            
            stage('Functional Test') {
                    steps {
                     sh '''#!/bin/bash
                     sleep 54
                     echo "Integration test"  '''
               }
            }
           
            stage('Regression test') {
                    steps {
                     sh '''#!/bin/bash
                     sleep 39
                     echo "Integration test"  '''
            }
           } 
          }
         }
             
      stage('Infra Security Inspection') {
            steps {
                 ansiblePlaybook(inventory: '/root/IAAC/playbooks/inventory.ini', playbook: '/root/IAAC/playbooks/ossecurity.yaml')
        }
      } 

     stage('Security Patching') {
             steps {
                ansiblePlaybook(inventory: '/root/IAAC/playbooks/inventory.ini', playbook: '/root/IAAC/playbooks/securitypatch.yml')

             }
           }

           
      stage('Smoke Test') { 
            steps {
                     sh '''#!/bin/bash
                     sleep 30
                     echo "Smoke Test Completed"  '''
               }
            } 
      stage('Destroy VM') {
               steps('Destroy VM ') {
                   sh '''#!/bin/bash
                      cd \'/root/infrastructure-as-code/terraform/small-size/'
                          /usr/local/bin/terraform show -auto-approve
                          echo \'All VM deleted\' '''
                        }
                       }

   }
}


